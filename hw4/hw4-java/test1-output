mvn clean
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for cse210a:hw4:jar:1
[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-jar-plugin is missing. @ line 26, column 12
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] ----------------------------< cse210a:hw4 >-----------------------------
[INFO] Building hw4 1
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ hw4 ---
[INFO] Deleting /Users/rashmichennagiri/Documents/2020_q3_spring/cse210a_PL/pl_homeworks/cse-210/hw4/hw4-java/target
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  0.212 s
[INFO] Finished at: 2020-05-06T18:28:23-07:00
[INFO] ------------------------------------------------------------------------
mvn install
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for cse210a:hw4:jar:1
[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-jar-plugin is missing. @ line 26, column 12
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] ----------------------------< cse210a:hw4 >-----------------------------
[INFO] Building hw4 1
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ hw4 ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 13 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ hw4 ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!
[INFO] Compiling 12 source files to /Users/rashmichennagiri/Documents/2020_q3_spring/cse210a_PL/pl_homeworks/cse-210/hw4/hw4-java/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ hw4 ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory /Users/rashmichennagiri/Documents/2020_q3_spring/cse210a_PL/pl_homeworks/cse-210/hw4/hw4-java/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ hw4 ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ hw4 ---
[INFO] No tests to run.
[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ hw4 ---
[INFO] Building jar: /Users/rashmichennagiri/Documents/2020_q3_spring/cse210a_PL/pl_homeworks/cse-210/hw4/hw4-java/target/hw4-1.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ hw4 ---
[INFO] Installing /Users/rashmichennagiri/Documents/2020_q3_spring/cse210a_PL/pl_homeworks/cse-210/hw4/hw4-java/target/hw4-1.jar to /Users/rashmichennagiri/.m2/repository/cse210a/hw4/1/hw4-1.jar
[INFO] Installing /Users/rashmichennagiri/Documents/2020_q3_spring/cse210a_PL/pl_homeworks/cse-210/hw4/hw4-java/pom.xml to /Users/rashmichennagiri/.m2/repository/cse210a/hw4/1/hw4-1.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  2.221 s
[INFO] Finished at: 2020-05-06T18:28:26-07:00
[INFO] ------------------------------------------------------------------------
cp target/hw4-1.jar .
1..56
not ok 1 custom-1
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/custom.bats, line 4)
#   `check 'x := [1,2,3]' '{x → [1, 2, 3]}'' failed
# x := [1,2,3] = {x → [1, 2, 3]}, your code outputs hw4.WhileInterpreterException: INVALID CHARACTER!
# 	at hw4.lexer.Lexer.scanToken(Lexer.java:127)
# 	at hw4.lexer.Lexer.scanUserInputForTokens(Lexer.java:37)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:65)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 2 custom-2
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/custom.bats, line 8)
#   `check 'x := [1,2] ; y := [3,4]' '{x → [1, 2], y → [3, 4]}'' failed
# x := [1,2] ; y := [3,4] = {x → [1, 2], y → [3, 4]}, your code outputs hw4.WhileInterpreterException: INVALID CHARACTER!
# 	at hw4.lexer.Lexer.scanToken(Lexer.java:127)
# 	at hw4.lexer.Lexer.scanUserInputForTokens(Lexer.java:37)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:65)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 3 custom-3
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/custom.bats, line 12)
#   `check 'while 0 < z * -4 do z := -1' '{}'' failed
# while 0 < z * -4 do z := -1 = {}, your code outputs Exception in thread "main" java.lang.NullPointerException
# 	at hw4.interpreter.Interpreter.stringify(Interpreter.java:44)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:35)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
ok 4 custom-4
not ok 5 custom-5
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/custom.bats, line 20)
#   `check 'i := 10 ; sum := 1 ; while 0 < i do { sum := sum + i ; i := i - 1 }' '{i → 0, sum → 56}'' failed
# i := 10 ; sum := 1 ; while 0 < i do { sum := sum + i ; i := i - 1 } = {i → 0, sum → 56}, your code outputs {i → 10}
# {i → 10, sum → 1}
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
ok 6 easy-1
not ok 7 easy-2
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 8)
#   `check 'skip' '{}'' failed
# skip = {}, your code outputs Exception in thread "main" java.lang.NullPointerException
# 	at hw4.interpreter.Interpreter.stringify(Interpreter.java:44)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:35)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
ok 8 easy-3
not ok 9 easy-4
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 16)
#   `check 'while false do x := 3' '{}'' failed
# while false do x := 3 = {}, your code outputs hw4.WhileInterpreterException: something wrong! :(
# 	at hw4.parser.Parser.parse(Parser.java:65)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
ok 10 easy-5
not ok 11 easy-6
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 24)
#   `check 'x := 1 * 9 ; if 5 < x then x := 2 - 2 else y := 9' '{x → 0}'' failed
# x := 1 * 9 ; if 5 < x then x := 2 - 2 else y := 9 = {x → 0}, your code outputs {x → 9}
# {x → 0}
ok 12 easy-7
ok 13 easy-8
ok 14 easy-9
ok 15 easy-10
ok 16 easy-11
ok 17 easy-12
ok 18 easy-13
ok 19 easy-14
not ok 20 easy-15
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 60)
#   `check 'while ¬ true do x := 1' '{}'' failed
# while ¬ true do x := 1 = {}, your code outputs Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:252)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitWhileOperationNode(Interpreter.java:327)
# 	at hw4.parser.Node$WhileOperationNode.accept(Node.java:169)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:53)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 21 easy-16
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 64)
#   `check 'while ¬ ( x < 0 ) do x := -1' '{x → -1}'' failed
# while ¬ ( x < 0 ) do x := -1 = {x → -1}, your code outputs Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:252)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitWhileOperationNode(Interpreter.java:327)
# 	at hw4.parser.Node$WhileOperationNode.accept(Node.java:169)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:53)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
ok 22 easy-17
ok 23 easy-18
ok 24 hard-1
ok 25 hard-2
ok 26 hard-3
ok 27 hard-4
ok 28 hard-5
ok 29 hard-6
not ok 30 hard-7
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 28)
#   `check 'if ¬ true then x := 1 else Y := 1' '{Y → 1}'' failed
# if ¬ true then x := 1 else Y := 1 = {Y → 1}, your code outputs Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:252)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitIfOperationNode(Interpreter.java:317)
# 	at hw4.parser.Node$IfOperationNode.accept(Node.java:142)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:53)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
ok 31 hard-8
ok 32 hard-9
not ok 33 hard-10
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 40)
#   `check 'if ( true ∧ true ) then p := t else p := t + 1' '{p → 0}'' failed
# if ( true ∧ true ) then p := t else p := t + 1 = {p → 0}, your code outputs Exception in thread "main" java.lang.NumberFormatException: For input string: "t"
# 	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:68)
# 	at java.base/java.lang.Integer.parseInt(Integer.java:658)
# 	at java.base/java.lang.Integer.parseInt(Integer.java:776)
# 	at hw4.interpreter.Interpreter.visitAssignmentNode(Interpreter.java:298)
# 	at hw4.parser.Node$AssignmentOperationNode.accept(Node.java:115)
# 	at hw4.interpreter.Interpreter.visitIfOperationNode(Interpreter.java:318)
# 	at hw4.parser.Node$IfOperationNode.accept(Node.java:142)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:53)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
ok 34 hard-11
ok 35 hard-12
not ok 36 hard-13
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 52)
#   `check 'if ( true ∨ true ) then x := z + y else x := y + 1 ; skip' '{x → 0}'' failed
# if ( true ∨ true ) then x := z + y else x := y + 1 ; skip = {x → 0}, your code outputs hw4.WhileInterpreterException:  ERROR AT : Expect '}' after commands
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:237)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.primary(Parser.java:249)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 37 hard-14
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 56)
#   `check 'while z * x = -3 ∧ 3 * x = z + R do z := y * z ; y := 1 - 0' '{y → 1}'' failed
# while z * x = -3 ∧ 3 * x = z + R do z := y * z ; y := 1 - 0 = {y → 1}, your code outputs Exception in thread "main" java.lang.NullPointerException
# 	at hw4.interpreter.Interpreter.stringify(Interpreter.java:44)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:35)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 38 hard-15
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 60)
#   `check 'if ( y * 4 < -1 - x ∧ -1 = 0 + y ) then z := ( -1 - -1 ) * -4 else z := 2 * -4 ; if ( y - -3 = y * z ∨ n * y < 1 * 2 ) then skip else if ( 1 < 0 - x ∨ true ) then x := y + -4 else y := -4 * y' '{z → -8}'' failed
# if ( y * 4 < -1 - x ∧ -1 = 0 + y ) then z := ( -1 - -1 ) * -4 else z := 2 * -4 ; if ( y - -3 = y * z ∨ n * y < 1 * 2 ) then skip else if ( 1 < 0 - x ∨ true ) then x := y + -4 else y := -4 * y = {z → -8}, your code outputs hw4.WhileInterpreterException:  ERROR AT : Expect '}' after commands
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:237)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.primary(Parser.java:249)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 39 hard-16
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 65)
#   `check 'if ( false ∨ 3 < y + X ) then l := lv + -1 else x := -4 - z ; while -1 - p = 2 - -3 ∧ false do while ( ¬ ( 2 * -2 < y * y ) ) do skip' '{x → -4}'' failed
# if ( false ∨ 3 < y + X ) then l := lv + -1 else x := -4 - z ; while -1 - p = 2 - -3 ∧ false do while ( ¬ ( 2 * -2 < y * y ) ) do skip = {x → -4}, your code outputs hw4.WhileInterpreterException:  ERROR AT : Expect '}' after commands
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:237)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.primary(Parser.java:249)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 40 hard-17
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 69)
#   `check 'while ( ¬ ( 0 - -1 < 2 + z ) ) do skip ; while -1 * IY = 2 - L ∧ 0 + x < 2 + 2 do while ( ¬ ( z + S = z - -1 ) ) do if ( false ∨ NT + -3 = 3 ) then y := k * 0 else y := 0 - y' '{}'' failed
# while ( ¬ ( 0 - -1 < 2 + z ) ) do skip ; while -1 * IY = 2 - L ∧ 0 + x < 2 + 2 do while ( ¬ ( z + S = z - -1 ) ) do if ( false ∨ NT + -3 = 3 ) then y := k * 0 else y := 0 - y = {}, your code outputs Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:252)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitWhileOperationNode(Interpreter.java:327)
# 	at hw4.parser.Node$WhileOperationNode.accept(Node.java:169)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:53)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 41 hard-18
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 73)
#   `check 'if ( z - 2 < -2 ∧ y * -1 < z * 2 ) then while ( ¬ ( 2 * z < y + y ) ) do skip else while H + z = 0 - -2 ∧ -2 * 0 < 3 - X do skip' '{}'' failed
# if ( z - 2 < -2 ∧ y * -1 < z * 2 ) then while ( ¬ ( 2 * z < y + y ) ) do skip else while H + z = 0 - -2 ∧ -2 * 0 < 3 - X do skip = {}, your code outputs Exception in thread "main" java.lang.NullPointerException
# 	at hw4.interpreter.Interpreter.stringify(Interpreter.java:44)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:35)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 42 medium-1
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 4)
#   `check 'a := 98 ; b := 76 ; while ¬ ( a = b ) do { if a < b then b := b - a else a := a - b }' '{a → 2, b → 2}'' failed
# a := 98 ; b := 76 ; while ¬ ( a = b ) do { if a < b then b := b - a else a := a - b } = {a → 2, b → 2}, your code outputs {a → 98}
# {a → 98, b → 76}
# Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:252)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitWhileOperationNode(Interpreter.java:327)
# 	at hw4.parser.Node$WhileOperationNode.accept(Node.java:169)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:53)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 43 medium-2
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 8)
#   `check 'a := 369 ; b := 1107 ; while ¬ ( a = b ) do { if a < b then b := b - a else a := a - b }' '{a → 369, b → 369}'' failed
# a := 369 ; b := 1107 ; while ¬ ( a = b ) do { if a < b then b := b - a else a := a - b } = {a → 369, b → 369}, your code outputs {a → 369}
# {a → 369, b → 1107}
# Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:252)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitWhileOperationNode(Interpreter.java:327)
# 	at hw4.parser.Node$WhileOperationNode.accept(Node.java:169)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:53)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 44 medium-3
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 12)
#   `check 'a := 369 ; b := 1108 ; while ¬ ( a = b ) do { if a < b then b := b - a else a := a - b }' '{a → 1, b → 1}'' failed
# a := 369 ; b := 1108 ; while ¬ ( a = b ) do { if a < b then b := b - a else a := a - b } = {a → 1, b → 1}, your code outputs {a → 369}
# {a → 369, b → 1108}
# Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:252)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitWhileOperationNode(Interpreter.java:327)
# 	at hw4.parser.Node$WhileOperationNode.accept(Node.java:169)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:53)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 45 medium-4
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 16)
#   `check 'i := 5 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 }' '{fact → 120, i → 0}'' failed
# i := 5 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 } = {fact → 120, i → 0}, your code outputs {i → 5}
# {fact → 1, i → 5}
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 46 medium-5
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 20)
#   `check 'i := 3 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 }' '{fact → 6, i → 0}'' failed
# i := 3 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 } = {fact → 6, i → 0}, your code outputs {i → 3}
# {fact → 1, i → 3}
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 47 medium-6
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 24)
#   `check 'i := -1 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 }' '{fact → 1, i → -1}'' failed
# i := -1 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 } = {fact → 1, i → -1}, your code outputs {i → -1}
# {fact → 1, i → -1}
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 48 medium-7
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 28)
#   `check 'while false do x := 1 ; if true then y := 1 else z := 1' '{y → 1}'' failed
# while false do x := 1 ; if true then y := 1 else z := 1 = {y → 1}, your code outputs hw4.WhileInterpreterException: something wrong! :(
# 	at hw4.parser.Parser.parse(Parser.java:65)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 49 medium-8
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 32)
#   `check 'while false do x := 1 ; y := 1' '{y → 1}'' failed
# while false do x := 1 ; y := 1 = {y → 1}, your code outputs hw4.WhileInterpreterException: something wrong! :(
# 	at hw4.parser.Parser.parse(Parser.java:65)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 50 medium-9
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 36)
#   `check 'if false then kj := 12 else while false do l0 := 0' '{}'' failed
# if false then kj := 12 else while false do l0 := 0 = {}, your code outputs hw4.WhileInterpreterException:  ERROR AT do: Expect '}' after commands
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:237)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.primary(Parser.java:249)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 51 medium-10
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 40)
#   `check 'if false then while true do skip else x := 2' '{x → 2}'' failed
# if false then while true do skip else x := 2 = {x → 2}, your code outputs hw4.WhileInterpreterException:  ERROR AT do: Expect '}' after commands
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:237)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.primary(Parser.java:247)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 52 medium-11
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 44)
#   `check 'i := 5 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 }' '{fact → 120, i → 0}'' failed
# i := 5 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 } = {fact → 120, i → 0}, your code outputs {i → 5}
# {fact → 1, i → 5}
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 53 medium-12
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 48)
#   `check 'i := 3 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 }' '{fact → 6, i → 0}'' failed
# i := 3 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 } = {fact → 6, i → 0}, your code outputs {i → 3}
# {fact → 1, i → 3}
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 54 medium-13
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 52)
#   `check 'i := -1 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 }' '{fact → 1, i → -1}'' failed
# i := -1 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 } = {fact → 1, i → -1}, your code outputs {i → -1}
# {fact → 1, i → -1}
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 55 medium-14
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 56)
#   `check 'while false do x := 1 ; if true then y := 1 else z := 1' '{y → 1}'' failed
# while false do x := 1 ; if true then y := 1 else z := 1 = {y → 1}, your code outputs hw4.WhileInterpreterException: something wrong! :(
# 	at hw4.parser.Parser.parse(Parser.java:65)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 56 medium-15
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 60)
#   `check 'while false do x := 1 ; y := 1' '{y → 1}'' failed
# while false do x := 1 ; y := 1 = {y → 1}, your code outputs hw4.WhileInterpreterException: something wrong! :(
# 	at hw4.parser.Parser.parse(Parser.java:65)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
mvn clean
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for cse210a:hw4:jar:1
[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-jar-plugin is missing. @ line 26, column 12
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] ----------------------------< cse210a:hw4 >-----------------------------
[INFO] Building hw4 1
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ hw4 ---
[INFO] Deleting /Users/rashmichennagiri/Documents/2020_q3_spring/cse210a_PL/pl_homeworks/cse-210/hw4/hw4-java/target
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  0.206 s
[INFO] Finished at: 2020-05-06T18:33:21-07:00
[INFO] ------------------------------------------------------------------------
mvn install
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for cse210a:hw4:jar:1
[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-jar-plugin is missing. @ line 26, column 12
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] ----------------------------< cse210a:hw4 >-----------------------------
[INFO] Building hw4 1
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ hw4 ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 13 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ hw4 ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!
[INFO] Compiling 12 source files to /Users/rashmichennagiri/Documents/2020_q3_spring/cse210a_PL/pl_homeworks/cse-210/hw4/hw4-java/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ hw4 ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory /Users/rashmichennagiri/Documents/2020_q3_spring/cse210a_PL/pl_homeworks/cse-210/hw4/hw4-java/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ hw4 ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ hw4 ---
[INFO] No tests to run.
[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ hw4 ---
[INFO] Building jar: /Users/rashmichennagiri/Documents/2020_q3_spring/cse210a_PL/pl_homeworks/cse-210/hw4/hw4-java/target/hw4-1.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ hw4 ---
[INFO] Installing /Users/rashmichennagiri/Documents/2020_q3_spring/cse210a_PL/pl_homeworks/cse-210/hw4/hw4-java/target/hw4-1.jar to /Users/rashmichennagiri/.m2/repository/cse210a/hw4/1/hw4-1.jar
[INFO] Installing /Users/rashmichennagiri/Documents/2020_q3_spring/cse210a_PL/pl_homeworks/cse-210/hw4/hw4-java/pom.xml to /Users/rashmichennagiri/.m2/repository/cse210a/hw4/1/hw4-1.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  2.098 s
[INFO] Finished at: 2020-05-06T18:33:24-07:00
[INFO] ------------------------------------------------------------------------
cp target/hw4-1.jar .
1..56
not ok 1 custom-1
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/custom.bats, line 4)
#   `check 'x := [1,2,3]' '{x → [1, 2, 3]}'' failed
# x := [1,2,3] = {x → [1, 2, 3]}, your code outputs hw4.WhileInterpreterException: INVALID CHARACTER!
# 	at hw4.lexer.Lexer.scanToken(Lexer.java:127)
# 	at hw4.lexer.Lexer.scanUserInputForTokens(Lexer.java:37)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:65)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 2 custom-2
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/custom.bats, line 8)
#   `check 'x := [1,2] ; y := [3,4]' '{x → [1, 2], y → [3, 4]}'' failed
# x := [1,2] ; y := [3,4] = {x → [1, 2], y → [3, 4]}, your code outputs hw4.WhileInterpreterException: INVALID CHARACTER!
# 	at hw4.lexer.Lexer.scanToken(Lexer.java:127)
# 	at hw4.lexer.Lexer.scanUserInputForTokens(Lexer.java:37)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:65)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 3 custom-3
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/custom.bats, line 12)
#   `check 'while 0 < z * -4 do z := -1' '{}'' failed
# while 0 < z * -4 do z := -1 = {}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# while (0 < (z * (- 4))) do { z := (- 1) } 
# while (0 < (z * (- 4))) do { z := (- 1) } 
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while (0 < (z * (- 4))) do { z := (- 1) } 
not ok 4 custom-4
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/custom.bats, line 16)
#   `check 'if x = 3 ∨ y < -1 then x := 1 else x := 9' '{x → 9}'' failed
# if x = 3 ∨ y < -1 then x := 1 else x := 9 = {x → 9}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=9, literal=9]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if ((x = 3) ∨ (y < (- 1))) then { x := 1 } else { x := 9 }
# if ((x = 3) ∨ (y < (- 1))) then { x := 1 } else { x := 9 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=9, literal=9]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if ((x = 3) ∨ (y < (- 1))) then { x := 1 } else { x := 9 }
# {x → 9}
not ok 5 custom-5
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/custom.bats, line 20)
#   `check 'i := 10 ; sum := 1 ; while 0 < i do { sum := sum + i ; i := i - 1 }' '{i → 0, sum → 56}'' failed
# i := 10 ; sum := 1 ; while 0 < i do { sum := sum + i ; i := i - 1 } = {i → 0, sum → 56}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=10, literal=10]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=sum, literal=sum]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=sum, literal=sum]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=sum, literal=sum]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# i := 10 ; sum := 1 ; while (0 < i) do { sum := (sum + i) ; i := (i - 1) } 
# i := 10 ; sum := 1 ; while (0 < i) do { sum := (sum + i) ; i := (i - 1) } 
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=10, literal=10]
# Token [tokenType=EOF, lexeme=, literal=null]
# i := 10
# {i → 10}
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=sum, literal=sum]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# sum := 1
# {i → 10, sum → 1}
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=sum, literal=sum]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=sum, literal=sum]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 6 easy-1
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 4)
#   `check 'x := 1' '{x → 1}'' failed
# x := 1 = {x → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# x := 1
# x := 1
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# x := 1
# {x → 1}
not ok 7 easy-2
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 8)
#   `check 'skip' '{}'' failed
# skip = {}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=SKIP, lexeme=skip, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# skip
# skip
# 
#  LIST OF TOKENS:
# Token [tokenType=SKIP, lexeme=skip, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# skip
not ok 8 easy-3
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 12)
#   `check 'if true then x := 1 else x := 0' '{x → 1}'' failed
# if true then x := 1 else x := 0 = {x → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if true then { x := 1 } else { x := 0 }
# if true then { x := 1 } else { x := 0 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if true then { x := 1 } else { x := 0 }
# {x → 1}
not ok 9 easy-4
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 16)
#   `check 'while false do x := 3' '{}'' failed
# while false do x := 3 = {}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# while false do { x := 3 } 
# while false do { x := 3 } 
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while false do { x := 3 } 
not ok 10 easy-5
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 20)
#   `check 'while x = 0 do x := 3' '{x → 3}'' failed
# while x = 0 do x := 3 = {x → 3}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# while (x = 0) do { x := 3 } 
# while (x = 0) do { x := 3 } 
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while (x = 0) do { x := 3 } 
# {x → 3}
not ok 11 easy-6
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 24)
#   `check 'x := 1 * 9 ; if 5 < x then x := 2 - 2 else y := 9' '{x → 0}'' failed
# x := 1 * 9 ; if 5 < x then x := 2 - 2 else y := 9 = {x → 0}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=9, literal=9]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=NUMBER, lexeme=5, literal=5]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=9, literal=9]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# x := (1 * 9) ; if (5 < x) then { x := (2 - 2) } else { y := 9 }
# x := (1 * 9) ; if (5 < x) then { x := (2 - 2) } else { y := 9 }
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=9, literal=9]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# x := (1 * 9)
# {x → 9}
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=5, literal=5]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=9, literal=9]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if (5 < x) then { x := (2 - 2) } else { y := 9 }
# {x → 0}
not ok 12 easy-7
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 28)
#   `check 'if x = 0 ∧ y < 4 then x := 1 else x := 3' '{x → 1}'' failed
# if x = 0 ∧ y < 4 then x := 1 else x := 3 = {x → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if ((x = 0) ∧ (y < 4)) then { x := 1 } else { x := 3 }
# if ((x = 0) ∧ (y < 4)) then { x := 1 } else { x := 3 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if ((x = 0) ∧ (y < 4)) then { x := 1 } else { x := 3 }
# {x → 1}
not ok 13 easy-8
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 32)
#   `check 'if x = 0 ∧ 4 < 4 then x := 1 else x := 3' '{x → 3}'' failed
# if x = 0 ∧ 4 < 4 then x := 1 else x := 3 = {x → 3}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if ((x = 0) ∧ (4 < 4)) then { x := 1 } else { x := 3 }
# if ((x = 0) ∧ (4 < 4)) then { x := 1 } else { x := 3 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if ((x = 0) ∧ (4 < 4)) then { x := 1 } else { x := 3 }
# {x → 3}
not ok 14 easy-9
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 36)
#   `check 'if 0 < x ∧ 4 = 4 then x := 1 else x := 3' '{x → 3}'' failed
# if 0 < x ∧ 4 = 4 then x := 1 else x := 3 = {x → 3}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if ((0 < x) ∧ (4 = 4)) then { x := 1 } else { x := 3 }
# if ((0 < x) ∧ (4 = 4)) then { x := 1 } else { x := 3 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if ((0 < x) ∧ (4 = 4)) then { x := 1 } else { x := 3 }
# {x → 3}
not ok 15 easy-10
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 40)
#   `check 'if 0 < x ∧ 4 < y then x := 1 else x := 3' '{x → 3}'' failed
# if 0 < x ∧ 4 < y then x := 1 else x := 3 = {x → 3}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if ((0 < x) ∧ (4 < y)) then { x := 1 } else { x := 3 }
# if ((0 < x) ∧ (4 < y)) then { x := 1 } else { x := 3 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if ((0 < x) ∧ (4 < y)) then { x := 1 } else { x := 3 }
# {x → 3}
not ok 16 easy-11
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 44)
#   `check 'if x = 0 ∨ y < 4 then x := 1 else x := 3' '{x → 1}'' failed
# if x = 0 ∨ y < 4 then x := 1 else x := 3 = {x → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if ((x = 0) ∨ (y < 4)) then { x := 1 } else { x := 3 }
# if ((x = 0) ∨ (y < 4)) then { x := 1 } else { x := 3 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if ((x = 0) ∨ (y < 4)) then { x := 1 } else { x := 3 }
# {x → 1}
not ok 17 easy-12
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 48)
#   `check 'if x = 0 ∨ 4 < 4 then x := 1 else x := 3' '{x → 1}'' failed
# if x = 0 ∨ 4 < 4 then x := 1 else x := 3 = {x → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if ((x = 0) ∨ (4 < 4)) then { x := 1 } else { x := 3 }
# if ((x = 0) ∨ (4 < 4)) then { x := 1 } else { x := 3 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if ((x = 0) ∨ (4 < 4)) then { x := 1 } else { x := 3 }
# {x → 1}
not ok 18 easy-13
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 52)
#   `check 'if 0 < x ∨ 4 = 4 then x := 1 else x := 3' '{x → 1}'' failed
# if 0 < x ∨ 4 = 4 then x := 1 else x := 3 = {x → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if ((0 < x) ∨ (4 = 4)) then { x := 1 } else { x := 3 }
# if ((0 < x) ∨ (4 = 4)) then { x := 1 } else { x := 3 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if ((0 < x) ∨ (4 = 4)) then { x := 1 } else { x := 3 }
# {x → 1}
not ok 19 easy-14
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 56)
#   `check 'if 0 < x ∨ 4 < y then x := 1 else x := 3' '{x → 3}'' failed
# if 0 < x ∨ 4 < y then x := 1 else x := 3 = {x → 3}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if ((0 < x) ∨ (4 < y)) then { x := 1 } else { x := 3 }
# if ((0 < x) ∨ (4 < y)) then { x := 1 } else { x := 3 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if ((0 < x) ∨ (4 < y)) then { x := 1 } else { x := 3 }
# {x → 3}
not ok 20 easy-15
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 60)
#   `check 'while ¬ true do x := 1' '{}'' failed
# while ¬ true do x := 1 = {}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# while (¬ true) do { x := 1 } 
# while (¬ true) do { x := 1 } 
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while (¬ true) do { x := 1 } 
# Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:253)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitWhileOperationNode(Interpreter.java:328)
# 	at hw4.parser.Node$WhileOperationNode.accept(Node.java:169)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:54)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 21 easy-16
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 64)
#   `check 'while ¬ ( x < 0 ) do x := -1' '{x → -1}'' failed
# while ¬ ( x < 0 ) do x := -1 = {x → -1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# while (¬ (x < 0)) do { x := (- 1) } 
# while (¬ (x < 0)) do { x := (- 1) } 
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while (¬ (x < 0)) do { x := (- 1) } 
# Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:253)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitWhileOperationNode(Interpreter.java:328)
# 	at hw4.parser.Node$WhileOperationNode.accept(Node.java:169)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:54)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 22 easy-17
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 68)
#   `check 'TRUE := 1' '{TRUE → 1}'' failed
# TRUE := 1 = {TRUE → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=TRUE, literal=TRUE]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# TRUE := 1
# TRUE := 1
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=TRUE, literal=TRUE]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# TRUE := 1
# {TRUE → 1}
not ok 23 easy-18
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/easy.bats, line 72)
#   `check 'FALSE := 1' '{FALSE → 1}'' failed
# FALSE := 1 = {FALSE → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=FALSE, literal=FALSE]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# FALSE := 1
# FALSE := 1
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=FALSE, literal=FALSE]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# FALSE := 1
# {FALSE → 1}
not ok 24 hard-1
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 4)
#   `check 'if true ∧ -3 < 4 then x := -1 else y := 2' '{x → -1}'' failed
# if true ∧ -3 < 4 then x := -1 else y := 2 = {x → -1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if (true ∧ ((- 3) < 4)) then { x := (- 1) } else { y := 2 }
# if (true ∧ ((- 3) < 4)) then { x := (- 1) } else { y := 2 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if (true ∧ ((- 3) < 4)) then { x := (- 1) } else { y := 2 }
# {x → -1}
not ok 25 hard-2
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 8)
#   `check 'if ( 1 - 1 ) < 0 then z8 := 09 else z3 := 90' '{z3 → 90}'' failed
# if ( 1 - 1 ) < 0 then z8 := 09 else z3 := 90 = {z3 → 90}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=z8, literal=z8]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=09, literal=9]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=z3, literal=z3]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=90, literal=90]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if ((1 - 1) < 0) then { z8 := 9 } else { z3 := 90 }
# if ((1 - 1) < 0) then { z8 := 9 } else { z3 := 90 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=z8, literal=z8]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=9, literal=9]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=z3, literal=z3]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=90, literal=90]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if ((1 - 1) < 0) then { z8 := 9 } else { z3 := 90 }
# {z3 → 90}
not ok 26 hard-3
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 12)
#   `check 'z := ( x8 + 1 ) * -4' '{z → -4}'' failed
# z := ( x8 + 1 ) * -4 = {z → -4}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=x8, literal=x8]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# z := ((x8 + 1) * (- 4))
# z := ((x8 + 1) * (- 4))
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=x8, literal=x8]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# z := ((x8 + 1) * (- 4))
# {z → -4}
not ok 27 hard-4
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 16)
#   `check 'x := y - -2' '{x → 2}'' failed
# x := y - -2 = {x → 2}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# x := (y - (- 2))
# x := (y - (- 2))
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# x := (y - (- 2))
# {x → 2}
not ok 28 hard-5
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 20)
#   `check 'while 0 = z * -4 do z := -1' '{z → -1}'' failed
# while 0 = z * -4 do z := -1 = {z → -1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# while (0 = (z * (- 4))) do { z := (- 1) } 
# while (0 = (z * (- 4))) do { z := (- 1) } 
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while (0 = (z * (- 4))) do { z := (- 1) } 
# {z → -1}
not ok 29 hard-6
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 24)
#   `check 'if 3 < -3 then g := 3 + -2 else h := 09 + 90' '{h → 99}'' failed
# if 3 < -3 then g := 3 + -2 else h := 09 + 90 = {h → 99}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=g, literal=g]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=h, literal=h]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=09, literal=9]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=NUMBER, lexeme=90, literal=90]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if (3 < (- 3)) then { g := (3 + (- 2)) } else { h := (9 + 90) }
# if (3 < (- 3)) then { g := (3 + (- 2)) } else { h := (9 + 90) }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=g, literal=g]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=h, literal=h]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=9, literal=9]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=NUMBER, lexeme=90, literal=90]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if (3 < (- 3)) then { g := (3 + (- 2)) } else { h := (9 + 90) }
# {h → 99}
not ok 30 hard-7
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 28)
#   `check 'if ¬ true then x := 1 else Y := 1' '{Y → 1}'' failed
# if ¬ true then x := 1 else Y := 1 = {Y → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=Y, literal=Y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if (¬ true) then { x := 1 } else { Y := 1 }
# if (¬ true) then { x := 1 } else { Y := 1 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=Y, literal=Y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if (¬ true) then { x := 1 } else { Y := 1 }
# Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:253)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitIfOperationNode(Interpreter.java:318)
# 	at hw4.parser.Node$IfOperationNode.accept(Node.java:142)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:54)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 31 hard-8
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 32)
#   `check 'if ( true ) then x := 1 else zir9 := 2' '{x → 1}'' failed
# if ( true ) then x := 1 else zir9 := 2 = {x → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=zir9, literal=zir9]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if true then { x := 1 } else { zir9 := 2 }
# if true then { x := 1 } else { zir9 := 2 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=zir9, literal=zir9]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if true then { x := 1 } else { zir9 := 2 }
# {x → 1}
not ok 32 hard-9
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 36)
#   `check 'if -1 < -2 then g40 := 40 else g41 := 14' '{g41 → 14}'' failed
# if -1 < -2 then g40 := 40 else g41 := 14 = {g41 → 14}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=g40, literal=g40]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=40, literal=40]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=g41, literal=g41]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=14, literal=14]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if ((- 1) < (- 2)) then { g40 := 40 } else { g41 := 14 }
# if ((- 1) < (- 2)) then { g40 := 40 } else { g41 := 14 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=g40, literal=g40]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=40, literal=40]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=g41, literal=g41]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=14, literal=14]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if ((- 1) < (- 2)) then { g40 := 40 } else { g41 := 14 }
# {g41 → 14}
not ok 33 hard-10
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 40)
#   `check 'if ( true ∧ true ) then p := t else p := t + 1' '{p → 0}'' failed
# if ( true ∧ true ) then p := t else p := t + 1 = {p → 0}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=p, literal=p]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=t, literal=t]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=p, literal=p]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=t, literal=t]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if (true ∧ true) then { p := t } else { p := (t + 1) }
# if (true ∧ true) then { p := t } else { p := (t + 1) }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=p, literal=p]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=t, literal=t]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=p, literal=p]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=t, literal=t]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if (true ∧ true) then { p := t } else { p := (t + 1) }
# Exception in thread "main" java.lang.NumberFormatException: For input string: "t"
# 	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:68)
# 	at java.base/java.lang.Integer.parseInt(Integer.java:658)
# 	at java.base/java.lang.Integer.parseInt(Integer.java:776)
# 	at hw4.interpreter.Interpreter.visitAssignmentNode(Interpreter.java:299)
# 	at hw4.parser.Node$AssignmentOperationNode.accept(Node.java:115)
# 	at hw4.interpreter.Interpreter.visitIfOperationNode(Interpreter.java:319)
# 	at hw4.parser.Node$IfOperationNode.accept(Node.java:142)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:54)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 34 hard-11
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 44)
#   `check 'if ( true ∨ -1 < 0 ) then k := ( 49 ) * 3 + k else k := 2 * 2 * 2 + 3' '{k → 147}'' failed
# if ( true ∨ -1 < 0 ) then k := ( 49 ) * 3 + k else k := 2 * 2 * 2 + 3 = {k → 147}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=k, literal=k]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=49, literal=49]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=k, literal=k]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=k, literal=k]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if (true ∨ ((- 1) < 0)) then { k := ((49 * 3) + k) } else { k := (((2 * 2) * 2) + 3) }
# if (true ∨ ((- 1) < 0)) then { k := ((49 * 3) + k) } else { k := (((2 * 2) * 2) + 3) }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=k, literal=k]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=49, literal=49]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=k, literal=k]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=k, literal=k]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if (true ∨ ((- 1) < 0)) then { k := ((49 * 3) + k) } else { k := (((2 * 2) * 2) + 3) }
# {k → 147}
not ok 35 hard-12
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 48)
#   `check 'if ( y < z ) then g := 3 else gh := 2' '{gh → 2}'' failed
# if ( y < z ) then g := 3 else gh := 2 = {gh → 2}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=g, literal=g]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=gh, literal=gh]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if (y < z) then { g := 3 } else { gh := 2 }
# if (y < z) then { g := 3 } else { gh := 2 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=g, literal=g]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=gh, literal=gh]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if (y < z) then { g := 3 } else { gh := 2 }
# {gh → 2}
not ok 36 hard-13
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 52)
#   `check 'if ( true ∨ true ) then x := z + y else x := y + 1 ; skip' '{x → 0}'' failed
# if ( true ∨ true ) then x := z + y else x := y + 1 ; skip = {x → 0}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=SKIP, lexeme=skip, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if (true ∨ true) then { x := (z + y) } else { x := (y + 1) ; skip }
# if (true ∨ true) then { x := (z + y) } else { x := (y + 1) ; skip }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after commands
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:237)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.primary(Parser.java:249)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 37 hard-14
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 56)
#   `check 'while z * x = -3 ∧ 3 * x = z + R do z := y * z ; y := 1 - 0' '{y → 1}'' failed
# while z * x = -3 ∧ 3 * x = z + R do z := y * z ; y := 1 - 0 = {y → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=R, literal=R]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# while (((z * x) = (- 3)) ∧ ((3 * x) = (z + R))) do { z := (y * z) }  ; y := (1 - 0)
# while (((z * x) = (- 3)) ∧ ((3 * x) = (z + R))) do { z := (y * z) }  ; y := (1 - 0)
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=R, literal=R]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while (((z * x) = (- 3)) ∧ ((3 * x) = (z + R))) do { z := (y * z) } 
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# y := (1 - 0)
# {y → 1}
not ok 38 hard-15
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 60)
#   `check 'if ( y * 4 < -1 - x ∧ -1 = 0 + y ) then z := ( -1 - -1 ) * -4 else z := 2 * -4 ; if ( y - -3 = y * z ∨ n * y < 1 * 2 ) then skip else if ( 1 < 0 - x ∨ true ) then x := y + -4 else y := -4 * y' '{z → -8}'' failed
# if ( y * 4 < -1 - x ∧ -1 = 0 + y ) then z := ( -1 - -1 ) * -4 else z := 2 * -4 ; if ( y - -3 = y * z ∨ n * y < 1 * 2 ) then skip else if ( 1 < 0 - x ∨ true ) then x := y + -4 else y := -4 * y = {z → -8}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=VARIABLE, lexeme=n, literal=n]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=SKIP, lexeme=skip, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if (((y * 4) < ((- 1) - x)) ∧ ((- 1) = (0 + y))) then { z := (((- 1) - (- 1)) * (- 4)) } else { z := (2 * (- 4)) ; if (((y - (- 3)) = (y * z)) ∨ ((n * y) < (1 * 2))) then { skip } else { if ((1 < (0 - x)) ∨ true) then { x := (y + (- 4)) } else { y := ((- 4) * y) } } }
# if (((y * 4) < ((- 1) - x)) ∧ ((- 1) = (0 + y))) then { z := (((- 1) - (- 1)) * (- 4)) } else { z := (2 * (- 4)) ; if (((y - (- 3)) = (y * z)) ∨ ((n * y) < (1 * 2))) then { skip } else { if ((1 < (0 - x)) ∨ true) then { x := (y + (- 4)) } else { y := ((- 4) * y) } } }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after commands
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:237)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.primary(Parser.java:249)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 39 hard-16
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 65)
#   `check 'if ( false ∨ 3 < y + X ) then l := lv + -1 else x := -4 - z ; while -1 - p = 2 - -3 ∧ false do while ( ¬ ( 2 * -2 < y * y ) ) do skip' '{x → -4}'' failed
# if ( false ∨ 3 < y + X ) then l := lv + -1 else x := -4 - z ; while -1 - p = 2 - -3 ∧ false do while ( ¬ ( 2 * -2 < y * y ) ) do skip = {x → -4}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=X, literal=X]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=l, literal=l]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=lv, literal=lv]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=p, literal=p]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=SKIP, lexeme=skip, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if (false ∨ (3 < (y + X))) then { l := (lv + (- 1)) } else { x := ((- 4) - z) ; while ((((- 1) - p) = (2 - (- 3))) ∧ false) do { while (¬ ((2 * (- 2)) < (y * y))) do { skip }  }  }
# if (false ∨ (3 < (y + X))) then { l := (lv + (- 1)) } else { x := ((- 4) - z) ; while ((((- 1) - p) = (2 - (- 3))) ∧ false) do { while (¬ ((2 * (- 2)) < (y * y))) do { skip }  }  }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=X, literal=X]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=l, literal=l]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=lv, literal=lv]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=4, literal=4]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after commands
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:237)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.primary(Parser.java:249)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 40 hard-17
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 69)
#   `check 'while ( ¬ ( 0 - -1 < 2 + z ) ) do skip ; while -1 * IY = 2 - L ∧ 0 + x < 2 + 2 do while ( ¬ ( z + S = z - -1 ) ) do if ( false ∨ NT + -3 = 3 ) then y := k * 0 else y := 0 - y' '{}'' failed
# while ( ¬ ( 0 - -1 < 2 + z ) ) do skip ; while -1 * IY = 2 - L ∧ 0 + x < 2 + 2 do while ( ¬ ( z + S = z - -1 ) ) do if ( false ∨ NT + -3 = 3 ) then y := k * 0 else y := 0 - y = {}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=SKIP, lexeme=skip, literal=null]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=IY, literal=IY]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=L, literal=L]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=S, literal=S]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=OR, lexeme=∨, literal=null]
# Token [tokenType=VARIABLE, lexeme=NT, literal=NT]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=k, literal=k]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# while (¬ ((0 - (- 1)) < (2 + z))) do { skip }  ; while ((((- 1) * IY) = (2 - L)) ∧ ((0 + x) < (2 + 2))) do { while (¬ ((z + S) = (z - (- 1)))) do { if (false ∨ ((NT + (- 3)) = 3)) then { y := (k * 0) } else { y := (0 - y) } }  } 
# while (¬ ((0 - (- 1)) < (2 + z))) do { skip }  ; while ((((- 1) * IY) = (2 - L)) ∧ ((0 + x) < (2 + 2))) do { while (¬ ((z + S) = (z - (- 1)))) do { if (false ∨ ((NT + (- 3)) = 3)) then { y := (k * 0) } else { y := (0 - y) } }  } 
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=SKIP, lexeme=skip, literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while (¬ ((0 - (- 1)) < (2 + z))) do { skip } 
# Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:253)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitWhileOperationNode(Interpreter.java:328)
# 	at hw4.parser.Node$WhileOperationNode.accept(Node.java:169)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:54)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 41 hard-18
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/hard.bats, line 73)
#   `check 'if ( z - 2 < -2 ∧ y * -1 < z * 2 ) then while ( ¬ ( 2 * z < y + y ) ) do skip else while H + z = 0 - -2 ∧ -2 * 0 < 3 - X do skip' '{}'' failed
# if ( z - 2 < -2 ∧ y * -1 < z * 2 ) then while ( ¬ ( 2 * z < y + y ) ) do skip else while H + z = 0 - -2 ∧ -2 * 0 < 3 - X do skip = {}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=SKIP, lexeme=skip, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=VARIABLE, lexeme=H, literal=H]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=X, literal=X]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=SKIP, lexeme=skip, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if (((z - 2) < (- 2)) ∧ ((y * (- 1)) < (z * 2))) then { while (¬ ((2 * z) < (y + y))) do { skip }  } else { while (((H + z) = (0 - (- 2))) ∧ (((- 2) * 0) < (3 - X))) do { skip }  }
# if (((z - 2) < (- 2)) ∧ ((y * (- 1)) < (z * 2))) then { while (¬ ((2 * z) < (y + y))) do { skip }  } else { while (((H + z) = (0 - (- 2))) ∧ (((- 2) * 0) < (3 - X))) do { skip }  }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=SKIP, lexeme=skip, literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=H, literal=H]
# Token [tokenType=PLUS, lexeme=+, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=AND, lexeme=∧, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=X, literal=X]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=SKIP, lexeme=skip, literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if (((z - 2) < (- 2)) ∧ ((y * (- 1)) < (z * 2))) then { while (¬ ((2 * z) < (y + y))) do { skip }  } else { while (((H + z) = (0 - (- 2))) ∧ (((- 2) * 0) < (3 - X))) do { skip }  }
not ok 42 medium-1
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 4)
#   `check 'a := 98 ; b := 76 ; while ¬ ( a = b ) do { if a < b then b := b - a else a := a - b }' '{a → 2, b → 2}'' failed
# a := 98 ; b := 76 ; while ¬ ( a = b ) do { if a < b then b := b - a else a := a - b } = {a → 2, b → 2}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=98, literal=98]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=76, literal=76]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# a := 98 ; b := 76 ; while (¬ (a = b)) do { if (a < b) then { b := (b - a) } else { a := (a - b) } } 
# a := 98 ; b := 76 ; while (¬ (a = b)) do { if (a < b) then { b := (b - a) } else { a := (a - b) } } 
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=98, literal=98]
# Token [tokenType=EOF, lexeme=, literal=null]
# a := 98
# {a → 98}
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=76, literal=76]
# Token [tokenType=EOF, lexeme=, literal=null]
# b := 76
# {a → 98, b → 76}
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while (¬ (a = b)) do { if (a < b) then { b := (b - a) } else { a := (a - b) } } 
# Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:253)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitWhileOperationNode(Interpreter.java:328)
# 	at hw4.parser.Node$WhileOperationNode.accept(Node.java:169)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:54)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 43 medium-2
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 8)
#   `check 'a := 369 ; b := 1107 ; while ¬ ( a = b ) do { if a < b then b := b - a else a := a - b }' '{a → 369, b → 369}'' failed
# a := 369 ; b := 1107 ; while ¬ ( a = b ) do { if a < b then b := b - a else a := a - b } = {a → 369, b → 369}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=369, literal=369]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1107, literal=1107]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# a := 369 ; b := 1107 ; while (¬ (a = b)) do { if (a < b) then { b := (b - a) } else { a := (a - b) } } 
# a := 369 ; b := 1107 ; while (¬ (a = b)) do { if (a < b) then { b := (b - a) } else { a := (a - b) } } 
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=369, literal=369]
# Token [tokenType=EOF, lexeme=, literal=null]
# a := 369
# {a → 369}
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1107, literal=1107]
# Token [tokenType=EOF, lexeme=, literal=null]
# b := 1107
# {a → 369, b → 1107}
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while (¬ (a = b)) do { if (a < b) then { b := (b - a) } else { a := (a - b) } } 
# Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:253)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitWhileOperationNode(Interpreter.java:328)
# 	at hw4.parser.Node$WhileOperationNode.accept(Node.java:169)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:54)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 44 medium-3
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 12)
#   `check 'a := 369 ; b := 1108 ; while ¬ ( a = b ) do { if a < b then b := b - a else a := a - b }' '{a → 1, b → 1}'' failed
# a := 369 ; b := 1108 ; while ¬ ( a = b ) do { if a < b then b := b - a else a := a - b } = {a → 1, b → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=369, literal=369]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1108, literal=1108]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# a := 369 ; b := 1108 ; while (¬ (a = b)) do { if (a < b) then { b := (b - a) } else { a := (a - b) } } 
# a := 369 ; b := 1108 ; while (¬ (a = b)) do { if (a < b) then { b := (b - a) } else { a := (a - b) } } 
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=369, literal=369]
# Token [tokenType=EOF, lexeme=, literal=null]
# a := 369
# {a → 369}
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1108, literal=1108]
# Token [tokenType=EOF, lexeme=, literal=null]
# b := 1108
# {a → 369, b → 1108}
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NOT, lexeme=¬, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=EQUAL, lexeme==, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=a, literal=a]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=VARIABLE, lexeme=b, literal=b]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while (¬ (a = b)) do { if (a < b) then { b := (b - a) } else { a := (a - b) } } 
# Exception in thread "main" java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.String (java.lang.Boolean and java.lang.String are in module java.base of loader 'bootstrap')
# 	at hw4.interpreter.Interpreter.visitNotOperationNode(Interpreter.java:253)
# 	at hw4.parser.Node$NotOperationNode.accept(Node.java:280)
# 	at hw4.interpreter.Interpreter.visitWhileOperationNode(Interpreter.java:328)
# 	at hw4.parser.Node$WhileOperationNode.accept(Node.java:169)
# 	at hw4.interpreter.Interpreter.evaluateExpression(Interpreter.java:54)
# 	at hw4.interpreter.Interpreter.interpret(Interpreter.java:34)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:55)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 45 medium-4
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 16)
#   `check 'i := 5 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 }' '{fact → 120, i → 0}'' failed
# i := 5 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 } = {fact → 120, i → 0}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=5, literal=5]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# i := 5 ; fact := 1 ; while (0 < i) do { fact := (fact * i) ; i := (i - 1) } 
# i := 5 ; fact := 1 ; while (0 < i) do { fact := (fact * i) ; i := (i - 1) } 
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=5, literal=5]
# Token [tokenType=EOF, lexeme=, literal=null]
# i := 5
# {i → 5}
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# fact := 1
# {fact → 1, i → 5}
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 46 medium-5
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 20)
#   `check 'i := 3 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 }' '{fact → 6, i → 0}'' failed
# i := 3 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 } = {fact → 6, i → 0}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# i := 3 ; fact := 1 ; while (0 < i) do { fact := (fact * i) ; i := (i - 1) } 
# i := 3 ; fact := 1 ; while (0 < i) do { fact := (fact * i) ; i := (i - 1) } 
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EOF, lexeme=, literal=null]
# i := 3
# {i → 3}
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# fact := 1
# {fact → 1, i → 3}
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 47 medium-6
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 24)
#   `check 'i := -1 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 }' '{fact → 1, i → -1}'' failed
# i := -1 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 } = {fact → 1, i → -1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# i := (- 1) ; fact := 1 ; while (0 < i) do { fact := (fact * i) ; i := (i - 1) } 
# i := (- 1) ; fact := 1 ; while (0 < i) do { fact := (fact * i) ; i := (i - 1) } 
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# i := (- 1)
# {i → -1}
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# fact := 1
# {fact → 1, i → -1}
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 48 medium-7
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 28)
#   `check 'while false do x := 1 ; if true then y := 1 else z := 1' '{y → 1}'' failed
# while false do x := 1 ; if true then y := 1 else z := 1 = {y → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# while false do { x := 1 }  ; if true then { y := 1 } else { z := 1 }
# while false do { x := 1 }  ; if true then { y := 1 } else { z := 1 }
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while false do { x := 1 } 
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if true then { y := 1 } else { z := 1 }
# {y → 1}
not ok 49 medium-8
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 32)
#   `check 'while false do x := 1 ; y := 1' '{y → 1}'' failed
# while false do x := 1 ; y := 1 = {y → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# while false do { x := 1 }  ; y := 1
# while false do { x := 1 }  ; y := 1
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while false do { x := 1 } 
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# y := 1
# {y → 1}
not ok 50 medium-9
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 36)
#   `check 'if false then kj := 12 else while false do l0 := 0' '{}'' failed
# if false then kj := 12 else while false do l0 := 0 = {}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=kj, literal=kj]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=12, literal=12]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=VARIABLE, lexeme=l0, literal=l0]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if false then { kj := 12 } else { while false do { l0 := 0 }  }
# if false then { kj := 12 } else { while false do { l0 := 0 }  }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=kj, literal=kj]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=12, literal=12]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=l0, literal=l0]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if false then { kj := 12 } else { while false do { l0 := 0 }  }
not ok 51 medium-10
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 40)
#   `check 'if false then while true do skip else x := 2' '{x → 2}'' failed
# if false then while true do skip else x := 2 = {x → 2}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=SKIP, lexeme=skip, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# if false then { while true do { skip }  } else { x := 2 }
# if false then { while true do { skip }  } else { x := 2 }
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=SKIP, lexeme=skip, literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=2, literal=2]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if false then { while true do { skip }  } else { x := 2 }
# {x → 2}
not ok 52 medium-11
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 44)
#   `check 'i := 5 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 }' '{fact → 120, i → 0}'' failed
# i := 5 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 } = {fact → 120, i → 0}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=5, literal=5]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# i := 5 ; fact := 1 ; while (0 < i) do { fact := (fact * i) ; i := (i - 1) } 
# i := 5 ; fact := 1 ; while (0 < i) do { fact := (fact * i) ; i := (i - 1) } 
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=5, literal=5]
# Token [tokenType=EOF, lexeme=, literal=null]
# i := 5
# {i → 5}
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# fact := 1
# {fact → 1, i → 5}
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 53 medium-12
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 48)
#   `check 'i := 3 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 }' '{fact → 6, i → 0}'' failed
# i := 3 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 } = {fact → 6, i → 0}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# i := 3 ; fact := 1 ; while (0 < i) do { fact := (fact * i) ; i := (i - 1) } 
# i := 3 ; fact := 1 ; while (0 < i) do { fact := (fact * i) ; i := (i - 1) } 
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=3, literal=3]
# Token [tokenType=EOF, lexeme=, literal=null]
# i := 3
# {i → 3}
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# fact := 1
# {fact → 1, i → 3}
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 54 medium-13
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 52)
#   `check 'i := -1 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 }' '{fact → 1, i → -1}'' failed
# i := -1 ; fact := 1 ; while 0 < i do { fact := fact * i ; i := i - 1 } = {fact → 1, i → -1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# i := (- 1) ; fact := 1 ; while (0 < i) do { fact := (fact * i) ; i := (i - 1) } 
# i := (- 1) ; fact := 1 ; while (0 < i) do { fact := (fact * i) ; i := (i - 1) } 
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=MINUS, lexeme=-, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# i := (- 1)
# {i → -1}
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# fact := 1
# {fact → 1, i → -1}
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=NUMBER, lexeme=0, literal=0]
# Token [tokenType=LESS_THAN, lexeme=<, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=LEFT_PARENTHESIS, lexeme=(, literal=null]
# Token [tokenType=VARIABLE, lexeme=fact, literal=fact]
# Token [tokenType=MULTIPLY, lexeme=*, literal=null]
# Token [tokenType=VARIABLE, lexeme=i, literal=i]
# Token [tokenType=RIGHT_PARENTHESIS, lexeme=), literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# hw4.WhileInterpreterException:  ERROR AT : Expect '}' after command
# 	at hw4.parser.Parser.consumeToken(Parser.java:328)
# 	at hw4.parser.Parser.primary(Parser.java:262)
# 	at hw4.parser.Parser.unary(Parser.java:202)
# 	at hw4.parser.Parser.arithmeticTerm(Parser.java:178)
# 	at hw4.parser.Parser.arithmeticExpression(Parser.java:160)
# 	at hw4.parser.Parser.booleanTerm(Parser.java:142)
# 	at hw4.parser.Parser.booleanExpression(Parser.java:122)
# 	at hw4.parser.Parser.commandTerm(Parser.java:99)
# 	at hw4.parser.Parser.commandExpression(Parser.java:77)
# 	at hw4.parser.Parser.parse(Parser.java:61)
# 	at hw4.interpreter.SmallStepInterpreter.interpretAST(SmallStepInterpreter.java:51)
# 	at hw4.WhileInterpreter.run(WhileInterpreter.java:84)
# 	at hw4.WhileInterpreter.runPrompt(WhileInterpreter.java:49)
# 	at hw4.WhileInterpreter.main(WhileInterpreter.java:97)
not ok 55 medium-14
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 56)
#   `check 'while false do x := 1 ; if true then y := 1 else z := 1' '{y → 1}'' failed
# while false do x := 1 ; if true then y := 1 else z := 1 = {y → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# while false do { x := 1 }  ; if true then { y := 1 } else { z := 1 }
# while false do { x := 1 }  ; if true then { y := 1 } else { z := 1 }
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while false do { x := 1 } 
# 
#  LIST OF TOKENS:
# Token [tokenType=IF, lexeme=if, literal=null]
# Token [tokenType=BOOLEAN, lexeme=true, literal=true]
# Token [tokenType=THEN, lexeme=then, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=ELSE, lexeme=else, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=z, literal=z]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# if true then { y := 1 } else { z := 1 }
# {y → 1}
not ok 56 medium-15
# (from function `check' in file tests/harness.bash, line 6,
#  in test file tests/medium.bats, line 60)
#   `check 'while false do x := 1 ; y := 1' '{y → 1}'' failed
# while false do x := 1 ; y := 1 = {y → 1}, your code outputs 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=SEMICOLON, lexeme=;, literal=null]
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# 
#  AST:
# while false do { x := 1 }  ; y := 1
# while false do { x := 1 }  ; y := 1
# 
#  LIST OF TOKENS:
# Token [tokenType=WHILE, lexeme=while, literal=null]
# Token [tokenType=BOOLEAN, lexeme=false, literal=false]
# Token [tokenType=DO, lexeme=do, literal=null]
# Token [tokenType=LEFT_BRACE, lexeme={, literal=null]
# Token [tokenType=VARIABLE, lexeme=x, literal=x]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=RIGHT_BRACE, lexeme=}, literal=null]
# Token [tokenType=EOF, lexeme=, literal=null]
# while false do { x := 1 } 
# 
#  LIST OF TOKENS:
# Token [tokenType=VARIABLE, lexeme=y, literal=y]
# Token [tokenType=ASSIGNMENT, lexeme=:=, literal=null]
# Token [tokenType=NUMBER, lexeme=1, literal=1]
# Token [tokenType=EOF, lexeme=, literal=null]
# y := 1
# {y → 1}
